"use strict";(self.webpackChunkpromptgineering=self.webpackChunkpromptgineering||[]).push([[2037],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,p=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=l(r),f=o,g=u["".concat(s,".").concat(f)]||u[f]||m[f]||p;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var p=r.length,i=new Array(p);i[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:o,i[1]=a;for(var l=2;l<p;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},91225:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const p=r.p+"assets/images/openprompt-f07d4839f2e8035198a0db9a89391286.gif",i={sidebar_position:17},a="OpenPrompt",s={unversionedId:"tooling/IDEs/openprompt",id:"tooling/IDEs/openprompt",title:"OpenPrompt",description:"OpenPrompt is a Python library",source:"@site/docs/tooling/IDEs/openprompt.md",sourceDirName:"tooling/IDEs",slug:"/tooling/IDEs/openprompt",permalink:"/ko/docs/tooling/IDEs/openprompt",draft:!1,editUrl:"https://github.com/trigaten/promptgineering/tree/v1.2.3/docs/tooling/IDEs/openprompt.md",tags:[],version:"current",sidebarPosition:17,frontMatter:{sidebar_position:17},sidebar:"tutorialSidebar",previous:{title:"Lang Chain",permalink:"/ko/docs/tooling/IDEs/langchain"},next:{title:"OpenAI DALLE IDE",permalink:"/ko/docs/tooling/IDEs/DALLE"}},l={},c=[{value:"Features",id:"features",level:2}],u={toc:c},m="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"openprompt"},"OpenPrompt"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://thunlp.github.io/OpenPrompt/index.html"},"OpenPrompt")," is a Python library\nthat provides various functionality for building and testing prompts."),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:p,style:{width:"750px"}})),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("p",null,"OpenPrompt supports models from huggingface, but not yet OpenAI. It focuses more\non datasets and testing than chaining. OpenPrompt also appears to support\nsoft-prompting via ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/thunlp/OpenDelta"},"https://github.com/thunlp/OpenDelta"),"."))}f.isMDXComponent=!0}}]);